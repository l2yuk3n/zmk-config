/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define ALP 0
#define NUM 1
#define NAV 2
#define FUN 3

#define BT(n) BT_SEL n

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
};

/*
/ {
    combos {
        compatible = "zmk,combos";
        combo_ctrlDot {
            timeout-ms = <50>;
            key-positions = <27 28>;
            layers = <0 1>;
            bindings = <&mt RCTRL DOT>;
        };
    };
};
*/

/ {
    keymap {
        compatible = "zmk,keymap";

        ALP {
            bindings = <
    &kp Q          &kp W          &kp F          &kp P          &kp B          &kp J          &kp L          &kp U          &kp Y       &hm NUM SEMI 
    &lt NAV A      &kp R          &kp S          &kp T          &kp G          &kp M          &kp N          &kp E          &kp I       &kp O
    &hm LSHFT Z    &hm LCTRL X    &hm LALT C     &kp D          &kp V          &kp K          &kp H          &hm RALT COMMA &kp RSHFT FSLH
	&kp LCTRL      &hm LGUI SQT             &lt NUM BSPC        &none                    &lt NAV SPACE  &kp TAB
            >;
        };
		
        NUM {
            bindings = <
    &kp EXCL       &kp AT         &kp HASH       &kp DLLR       &kp PRCNT      &kp CARET      &kp AMPS       &kp STAR       &kp LPAR       &kp RPAR
    &kp N1         &kp N2         &kp N3         &kp N4         &kp N5         &kp N6         &kp N7         &kp N8         &kp N9         &kp N0
    &hm LSHFT BSLH &kp SEMI       &kp GRAVE      &kp SQT        &kp COLON      &kp MINUS      &kp EQUAL      &kp COMMA      &kp RSHFT FSLH
	&kp LCTRL      &kp LALT                 &trans              &none                    &lt FUN RET    &kp RALT
            >;
        };
		
        NAV {
            bindings = <
    &kp ESC        &kp PGUP       &kp UP         &kp HOME       &kp C_MUTE     &kp KP_MINUS    &kp KP_N7     &kp KP_N8      &kp KP_N9      &kp BSPC
    &trans         &kp LEFT       &kp DOWN       &kp RIGHT      &kp KP_NUM     &kp KP_ASTERISK &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS
    &kp LSHFT      &kp PGDN       &kp C_VOL_UP   &kp END        &kp KP_DIVIDE  &kp KP_N1      &kp KP_N2      &kp KP_N3      &kp KP_ENTER
	&kp LCTRL      &kp C_VOL_DN             &lt FUN DEL         &none                    &trans         &kp KP_N0
            >;
        };
		
        FUN {
            bindings = <
    &kp F1         &kp F2         &kp F3         &kp F4         &kp F5         &kp F6         &kp F7         &kp F8         &kp F9         &kp F10
    &kp LT         &kp LBRC       &kp LBKT       &kp LPAR       &kp F11        &kp F12        &kp RPAR       &kp RBKT       &kp RBRC       &kp GT
    &bt BT(0)      &bt BT(1)      &bt BT(2)      &bt BT(3)      &out OUT_BLE   &out OUT_USB   &bt BT_PRV     &bt BT_NXT     &bt BT_CLR
    &kp LCTRL      &kp LGUI                 &trans              &none                    &trans         &kp RALT
            >;
        };
    };
};